openapi: 3.0.0
servers:
  - description: SwaggerHub API
    url: HTTP
  - description: SwaggerHub Secure API
    url: HTTPS
info:
  title: A simple E-commerce API
  description: A simple API for managing products, orders, users, and categories in an e-commerce system.
  version: 1.0.0
tags:
  - name: product
    description: Everything about product
  - name: user
    description: Operations about user
  - name: order
    description: Information about order
  - name: category
    description: Operations about category
paths:
  /products:
    get:
      tags:
        - product
      summary: get all products
      description: Get all available products.
      responses:
        '200':
          description: Get all products successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - product
      summary: create a new product
      description: Create a new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Create new product successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/category/{categoryId}:
    get:
      tags:
        - product
      summary: get all products by category
      description: Get all available products by category
      responses:
        '200':
          description: Get all products by category successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{productId}:
    get:
      tags:
        - product
      summary: get a product
      description: Get a product
      parameters:
        - name: productId
          required: true
          in: path
          description: id of the product
          schema:
            type: string
      responses:
        '200':
          description: Get a product successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - product
      summary: update a product
      description: Update a product by the product id
      parameters:
        - name: productId
          required: true
          in: path
          description: id of the product
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: The product with that product id is updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'        

    delete:
      tags:
        - product
      summary: delete the product by the product id
      description: Delete the product by the product id
      parameters:
        - name: productId
          required: true
          in: path
          description: id of the product
          schema:
            type: string
      responses:
        '204':
          description: The product with that product id is deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      tags:
        - user
      summary: get all users
      description: Get all available users.
      responses:
        '200':
          description: Get all users successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - user
      summary: register user
      description: Create a user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Register user successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          
  /users/login:
    post:
      tags:
       - user
      summary: login user
      description: Log in a user with provided email and password
      requestBody:
        description: Log in with email and password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    put:
      tags:
        - user
      summary: update a user
      description: Update a user by the user id
      parameters:
        - name: userId
          required: true
          in: path
          description: id of the user
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The user with that user id is updated successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
           
    delete:
      tags:
        - user
      summary: delete the user by the user id
      description: Delete the product by the user id
      parameters:
        - name: userId
          required: true
          in: path
          description: id of the user
          schema:
            type: string
      responses:
        '204':
          description: The user with that user id is deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/password:
    post:
      tags:
        - user
      summary: forget password request
      description: Request to reset password
      requestBody:
        description: User email for password reset
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200': 
          description: Password reset request sent successfully
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      tags:
        - user
      summary: update password
      description: Update user password
      requestBody:
        description: User password and new password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200': 
          description: Password is updated successfully
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}/ban:
    post:
      tags:
        - user
      summary: ban a user
      description: Ban a user by user ID (only accessible to admins)
      parameters:
      - name: userId
        in: path
        description: ID of the user
        required: true
        schema:
          type: string
      responses:
        '200':
          description: User banned successfully
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}/unban:
    post:
      tags:
        - user
      summary: unban a user
      description: Unban a user by user ID (only accessible to admins)
      parameters:
      - name: userId
        in: path
        description: ID of the user
        required: true
        schema:
          type: string
      responses:
        '200':
          description: User unbanned successfully
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders:
    get:
      tags:
        - order
      summary: get all orders
      description: Get all available orders.
      responses:
        '200':
          description: Get all orders successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{userId}:
    get:
      tags:
        - order
      summary: get an order
      description: Get an order by user id
      parameters:
        - name: orderId
          required: true
          in: path
          description: id of the order
          schema:
            type: string
      responses:
        '200':
          description: Get the order successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - order
      summary: create a new order
      description: A user create a new order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: That user create new the order successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /orders/{orderId}:
    put:
      tags:
        - order
      summary: update an order
      description: Update an order by the order id
      parameters:
        - name: orderId
          required: true
          in: path
          description: id of the order
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The order with that order id is updated successfully
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
    delete:
      tags:
        - order
      summary: delete the order by the order id
      description: Delete the order by the order id
      parameters:
        - name: orderId
          required: true
          in: path
          description: id of the order
          schema:
            type: string
      responses:
        '204':
          description: The order with that order id is deleted successfully
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories:
    get:
      tags:
        - category
      summary: get the list of categories
      description: Get the list of categories
      responses:
        '200':
          description: Get the categories list successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - category
      summary: create a new category
      description: Create a new category
      requestBody:
        description: Create a new category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: The category is created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories/{categoryId}:
    get:
      tags:
        - category
      summary: get a category by category id
      description: Get a category by category id
      parameters:
        - name: categoryId
          required: true
          in: path
          description: id of the category
          schema:
            type: string
      responses:
        '200':
          description: Get a category successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - category
      summary: update a category by the category id
      description: Update a category by the category id
      parameters:
        - name: categoryId
          required: true
          in: path
          description: id of the category
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: The category is updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - category
      summary: delete the category by the category id
      description: Delete the category by the category id
      parameters:
        - name: catgoryId
          required: true
          in: path
          description: id of the category
          schema:
            type: string
      responses:
        '204':
          description: The category with category id is deleted successfully
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Product:
      type: object
      properties:
        productId:
          type: string
          example: '102'
        title:
          type: string
          example: 'product1'
        price:
          type: number
          example: 1
        description:
          type: string
          example: 'this is a product'
        size:
          type: number
          example: 'M'
          enum:
            - S
            - M
            - L
        images:
          type: string
          example: 'https://picsum.photos/seed/picsum/600/400'
        categoryId:
          type: string
          example: 104

    User:
      type: object
      properties:
        userId:
          type: string
          example: '203'
        email:
          type: string
          format: email
          example: 'user@mail.com'
        password:
          type: string
          example: 'password'
        firstname:
          type: string
          example: 'John'
        lasttname:
          type: string
          example: 'Smith'
        role:
          type: string
          example: 'customer'
        avatar:
          type: string
          example: 'https://fastly.picsum.photos/id/5/640/480.jpg'
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        banStatus:
          type: boolean
          example: false

    Category:
      type: object
      properties:
        categoryId:
          type: string
          example: '104'
        name:
          type: string
          example: 'T-shirt'
        image:
          type: string
          example: 'https://api.lorem.space/image/fashion?w=640&h=480&r=4278'

    Order:
      type: object
      properties:
        orderId:
          type: string
          example: '304'
        userId:
          type: string
          example: '203'
        products:
          type: array
          example:
            - productId: '101'
              title: 'product1'
            - productId: '102'
              title: 'product2'
          items:
            type: object
            properties:
              productId:
                type: string
                example: '101'
              title:
                type: string
                example: 'product1'
        totalPrice:
          type: number
          example: 1024
        createAt:
          type: string
          example: '14/03/2024'

    Error:
      type: object
      properties:
        message:
          type: string
          description: error message!
